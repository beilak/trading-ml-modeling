from sklearn.model_selection import TimeSeriesSplit
import pandas as pd
import numpy as np
from lightgbm import LGBMClassifier
from sklearn.metrics import accuracy_score, classification_report, roc_auc_score


TARGET_COLUMN = 'tbm_10d' # –ù–∞—à–∞ —Ü–µ–ª—å –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è!

NO_IMPORTANCE_FESTURES = [
    "is_quarter_start",
    "sma7_above_sma15",
    "macd_cross_signal",
    "sma3_cross_sma7",
    "macd_hist_acceleration",
    "cbr_rate_change_flag",
    "bb_upper_breakout",
    "sma50_cross_sma200",
    "sarimax_failed",
    "bb_lower_breakout",
    "bb_percent_b",
    "macd_state",
    "BBM_20_2.0_2.0",
    "sma3_above_sma10",
    "sma3_above_sma7",
    "sma7_cross_sma15",
    "bb_width_norm",
    "sma3_cross_sma10",
    "is_month_end",
    "sma70_cross_sma200",
    
    'high_to_sma_30', 'sma_5', 'intraday_move_norm', 'sma_20', 'sma_150', 'fft_abs_0', 'rolling_std_7', 'wv_L0_mean', 'open_to_sma_15', 'close_to_sma_20', 'sarimax_pred_3d_to_today', 'is_quarter_end', 'sma_7', 'sma_30', 'close_to_sma_40', 'sma_10', 'is_month_start', 'sma50_above_sma200', 'sma20_above_sma50', 'sma20_cross_sma50',
]


def select_target_columns():
    return TARGET_COLUMN


def select_feature_columns(df: pd.DataFrame):
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ (X) –∏ —Ü–µ–ª—å (y)
    features_to_remove = ["day_of_year", "week_of_year", "month"]

    tbm_cols = [col for col in df.columns if col.startswith('tbm_')]
    cols_to_drop = ['Date', 'Ticker', 'Open', 'High', 'Low', 'Close', 'Volume'] + tbm_cols + features_to_remove + NO_IMPORTANCE_FESTURES

    feature_cols = [col for col in df.columns if col not in cols_to_drop]
    return feature_cols

def build_model():
    # –û–±—É—á–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –º–æ–¥–µ–ª—å –Ω–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
    model = LGBMClassifier(
            objective='multiclass', # –í–∞–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å, —á—Ç–æ —É –Ω–∞—Å 3 –∫–ª–∞—Å—Å–∞
            n_estimators=100,
            max_depth=10,
            random_state=42,
            class_weight='balanced',
            n_jobs=-1,
            verbosity=-1 
        )
    return model


def train_model_LGBMClassifier(X: pd.DataFrame, y: pd.DataFrame):
    # –û–±—É—á–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –º–æ–¥–µ–ª—å –Ω–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
    model = build_model()
    print("–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏...")
    # –ë–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 1000 –∑–∞–ø–∏—Å–µ–π
    if len(X) > 1000:
        X_train = X.iloc[-1000:]
        y_train = y.iloc[-1000:]
    else:
        X_train = X
        y_train = y
    model.fit(X, y)
    return model


def walk_forward_train_LGBMClasifier_model(df: pd.DataFrame, X: pd.DataFrame, y: pd.DataFrame):
    # --- –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö (Walk-Forward Validation) ---
    # –ú—ã –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å 5 "—Å–¥–≤–∏–≥–æ–≤". –ú–æ–¥–µ–ª—å –±—É–¥–µ—Ç –æ–±—É—á–∞—Ç—å—Å—è –Ω–∞ —á–∞—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö,
    # –∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–º, –±–æ–ª–µ–µ –Ω–æ–≤–æ–º –±–ª–æ–∫–µ.
    n_splits = 5
    tscv = TimeSeriesSplit(n_splits=n_splits)

    print(f"\n–ù–∞—á–∏–Ω–∞–µ–º Walk-Forward –≤–∞–ª–∏–¥–∞—Ü–∏—é —Å {n_splits} —Å–ø–ª–∏—Ç–∞–º–∏...")

    # --- –û–±—É—á–µ–Ω–∏–µ –∏ –æ—Ü–µ–Ω–∫–∞ –º–æ–¥–µ–ª–∏ –≤ —Ü–∏–∫–ª–µ ---

    all_scores = []

    # –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    results_summary = pd.DataFrame(
        columns=['Split', 'Train Start', 'Train End', 'Test Start', 'Test End', 
                'Accuracy', 'ROC AUC 1 (Buy)', 'ROC AUC -1 (Sell)', 'ROC AUC 0', 'Precision (Buy)', 'Recall (Buy)', 'F1-score (Buy)',
                'Precision (Sell)', 'Recall (Sell)', 'F1-score (Sell)']
    )

    for i, (train_index, test_index) in enumerate(tscv.split(X)):
        print(f"\n--- –°–ø–ª–∏—Ç {i+1}/{n_splits} ---")
        
        # –†–∞–∑–¥–µ–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ –æ–±—É—á–∞—é—â—É—é –∏ —Ç–µ—Å—Ç–æ–≤—É—é –≤—ã–±–æ—Ä–∫–∏
        X_train, X_test = X.iloc[train_index], X.iloc[test_index]
        y_train, y_test = y.iloc[train_index], y.iloc[test_index]
        
        print(f"–†–∞–∑–º–µ—Ä –æ–±—É—á–∞—é—â–µ–π –≤—ã–±–æ—Ä–∫–∏: {len(X_train)}")
        print(f"–†–∞–∑–º–µ—Ä —Ç–µ—Å—Ç–æ–≤–æ–π –≤—ã–±–æ—Ä–∫–∏: {len(X_test)}")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å
        # class_weight='balanced' –ø–æ–º–æ–≥–∞–µ—Ç –º–æ–¥–µ–ª–∏ –ª—É—á—à–µ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –Ω–µ—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∫–ª–∞—Å—Å–∞–º–∏
        # n_jobs=-1 –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —è–¥—Ä–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è
        # model = RandomForestClassifier(
        #     n_estimators=100,      # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ä–µ–≤—å–µ–≤ –≤ –ª–µ—Å—É
        #     max_depth=10,          # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≥–ª—É–±–∏–Ω–∞ –∫–∞–∂–¥–æ–≥–æ –¥–µ—Ä–µ–≤–∞
        #     random_state=42,       # –î–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        #     class_weight='balanced',
        #     n_jobs=-1
        # )

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ù–û–í–£–Æ –º–æ–¥–µ–ª—å
        # model = LGBMClassifier(
        #     objective='multiclass', # –í–∞–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å, —á—Ç–æ —É –Ω–∞—Å 3 –∫–ª–∞—Å—Å–∞
        #     n_estimators=100,
        #     max_depth=10,
        #     random_state=42,
        #     class_weight='balanced',
        #     n_jobs=-1,
        #     verbosity=-1 
        # )
        model = train_model_LGBMClassifier(X_train, y_train)
        
        # –û–±—É—á–∞–µ–º –º–æ–¥–µ–ª—å
        # print("–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏...")
        # model.fit(X_train, y_train)
        
        # –î–µ–ª–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
        print("–û—Ü–µ–Ω–∫–∞ –º–æ–¥–µ–ª–∏...")
        y_pred = model.predict(X_test)
        # print("–ü–æ–ª—É—á–µ–Ω–∏–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π...")
        y_pred_proba = model.predict_proba(X_test)
        
        # –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –¥–ª—è –Ω–æ–≤—ã—Ö –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é '0' (Hold)
        # y_pred_filtered = np.zeros(len(y_test)) 

        # –ì–¥–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∫–ª–∞—Å—Å–∞ +1 > –ø–æ—Ä–æ–≥–∞, —Å—Ç–∞–≤–∏–º +1
        # buy_signals = y_pred_proba[:, 2] > CONFIDENCE_THRESHOLD 
        # y_pred_filtered[buy_signals] = 1

        # –ì–¥–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∫–ª–∞—Å—Å–∞ -1 > –ø–æ—Ä–æ–≥–∞, —Å—Ç–∞–≤–∏–º -1
        # –í–ê–ñ–ù–û: y_pred_proba –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –≤ –ø–æ—Ä—è–¥–∫–µ –∫–ª–∞—Å—Å–æ–≤ [-1, 0, 1]
        # –ü–æ—ç—Ç–æ–º—É P(-1) —ç—Ç–æ y_pred_proba[:, 0]
        # P(0)  —ç—Ç–æ y_pred_proba[:, 1]
        # P(+1) —ç—Ç–æ y_pred_proba[:, 2]
        # sell_signals = y_pred_proba[:, 0] > CONFIDENCE_THRESHOLD
        # y_pred_filtered[sell_signals] = -1
        
        # –û—Ü–µ–Ω–∏–≤–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–æ
        accuracy = accuracy_score(y_test, y_pred)
        # accuracy = accuracy_score(y_test, y_pred_filtered)
        all_scores.append(accuracy)
        
        print(f"\n–¢–æ—á–Ω–æ—Å—Ç—å (Accuracy) –Ω–∞ —Å–ø–ª–∏—Ç–µ {i+1}: {accuracy:.4f}")
        # print(f"\n–¢–æ—á–Ω–æ—Å—Ç—å (Accuracy) –Ω–∞ —Å–ø–ª–∏—Ç–µ {i+1} (—Å –ø–æ—Ä–æ–≥–æ–º {CONFIDENCE_THRESHOLD}): {accuracy:.4f}")
        
        roc_auc = roc_auc_score(y_test, y_pred_proba, multi_class='ovr', average=None)
        roc_auc_dict = {cls: auc_value for cls, auc_value in zip(model.classes_, roc_auc)}


        # –í—ã–≤–æ–¥–∏–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –∫–∞—á–µ—Å—Ç–≤—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª–∞—Å—Å–∞
        print("–î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –∫–∞—á–µ—Å—Ç–≤—É (Classification Report):")
        print(classification_report(y_test, y_pred, target_names=['-1 (Sell)', '0 (Hold)', '1 (Buy)']))
        # print(f"üìä ROC AUC:   {roc_auc:.3f}")
        print(f"üìä ROC AUC -1:   {roc_auc_dict[-1]}")
        print(f"üìä ROC AUC 0:   {roc_auc_dict[0]}")
        print(f"üìä ROC AUC 1:   {roc_auc_dict[1]}")
        # print(classification_report(y_test, y_pred_filtered, target_names=['-1 (Sell)', '0 (Hold)', '1 (Buy)']))

        # --- –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–≤–æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã ---
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞ –¥–ª—è –æ–±—É—á–∞—é—â–µ–π –∏ —Ç–µ—Å—Ç–æ–≤–æ–π –≤—ã–±–æ—Ä–æ–∫
        train_start_date = df.loc[train_index, 'Date'].min().strftime('%Y-%m-%d')
        train_end_date = df.loc[train_index, 'Date'].max().strftime('%Y-%m-%d')
        test_start_date = df.loc[test_index, 'Date'].min().strftime('%Y-%m-%d')
        test_end_date = df.loc[test_index, 'Date'].max().strftime('%Y-%m-%d')

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –∏–∑ –æ—Ç—á–µ—Ç–∞
        report = classification_report(y_test, y_pred, output_dict=True)
        # report = classification_report(y_test, y_pred_filtered, output_dict=True)
        buy_metrics = report.get('1', {})  # –ò—Å–ø–æ–ª—å–∑—É–µ–º .get() –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏, –µ—Å–ª–∏ –∫–ª–∞—Å—Å–∞ –Ω–µ—Ç
        sell_metrics = report.get('-1', {})

        # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Å–ø–ª–∏—Ç–∞
        split_results = {
            'Split': i + 1,
            'Train Start': train_start_date,
            'Train End': train_end_date,
            'Test Start': test_start_date,
            'Test End': test_end_date,
            'Accuracy': accuracy,
            'ROC AUC 1 (Buy)': roc_auc_dict[1], 
            'ROC AUC -1 (Sell)': roc_auc_dict[-1], 
            'ROC AUC 0': roc_auc_dict[0],
            'Precision (Buy)': buy_metrics.get('precision'),
            'Recall (Buy)': buy_metrics.get('recall'),
            'F1-score (Buy)': buy_metrics.get('f1-score'),
            # 'Support (Buy)': buy_metrics.get('support'),
            'Precision (Sell)': sell_metrics.get('precision'),
            'Recall (Sell)': sell_metrics.get('recall'),
            'F1-score (Sell)': sell_metrics.get('f1-score'),
            # 'Support (Sell)': sell_metrics.get('support'),
        }

        results_summary.loc[i] = split_results





    print("="*100)




    print(f"\n–°—Ä–µ–¥–Ω—è—è —Ç–æ—á–Ω–æ—Å—Ç—å –ø–æ –≤—Å–µ–º —Å–ø–ª–∏—Ç–∞–º: {np.mean(all_scores):.4f}")



    print("\n\n--- –°–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ —Å–ø–ª–∏—Ç–∞–º ---")
    # –û–∫—Ä—É–≥–ª—è–µ–º —á–∏—Å–ª–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
    numeric_cols = results_summary.select_dtypes(include=np.number).columns
    results_summary[numeric_cols] = results_summary[numeric_cols].round(3)
    print(results_summary.to_string()) # .to_string() –≤—ã–≤–µ–¥–µ—Ç –≤—Å—é —Ç–∞–±–ª–∏—Ü—É –±–µ–∑ –æ–±—Ä–µ–∑–∫–∏
