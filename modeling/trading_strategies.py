import pandas as pd
import datetime
from LGBMClassifier_modeling import build_model, select_feature_columns, select_target_columns, train_model_LGBMClassifier
import numpy as np
from abc import ABC, abstractmethod

import os
import json
import numpy as np
import pandas as pd
from abc import ABC, abstractmethod

import os
import json
import numpy as np
import pandas as pd
from abc import ABC, abstractmethod

import numpy as np
import pandas as pd
from abc import ABC, abstractmethod

from meta_model_trainer import build_meta_model, train_meta_model, META_CONFIDENCE_THRESHOLD


# ==============================================================
# üéØ –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
# ==============================================================

class BaseStrategy(ABC):
    """
    –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏.
    –û–∂–∏–¥–∞–µ—Ç DataFrame —Å –∫–æ–ª–æ–Ω–∫–∞–º–∏ ['Date', 'Ticker', ...].
    """

    def __init__(self, df: pd.DataFrame):
        if not {"Date", "Ticker"}.issubset(df.columns):
            raise ValueError("DataFrame –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–æ–ª–æ–Ω–∫–∏ 'Date' –∏ 'Ticker'")

        self.df = df.copy()
        self.df["Date"] = pd.to_datetime(self.df["Date"])
        self.df.sort_values(["Date", "Ticker"], inplace=True)
        self.df.reset_index(drop=True, inplace=True)

        self.tickers = self.df["Ticker"].unique().tolist()
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.df):,} —Å—Ç—Ä–æ–∫ –ø–æ {len(self.tickers)} —Ç–∏–∫–µ—Ä–∞–º.")

    @abstractmethod
    def generate_signals(self, current_date: pd.Timestamp, tickers: list) -> pd.Series:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç Series —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–π –¥–∞—Ç—ã.
        index = tickers, values ‚àà {1, 0, -1}
        """
        ...


# ==============================================================
# üé≤ –°–ª—É—á–∞–π–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è (–∑–∞–≥–ª—É—à–∫–∞)
# ==============================================================

class RandomStrategy(BaseStrategy):
    def __init__(self, df: pd.DataFrame, seed: int = 42):
        super().__init__(df)
        self.seed = seed
        np.random.seed(seed)

    def generate_signals(self, current_date: pd.Timestamp, tickers: list) -> pd.Series:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã 1 (–ø–æ–∫—É–ø–∫–∞) / 0 (–Ω–µ –¥–µ—Ä–∂–∞—Ç—å).
        """
        # —Ñ–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        daily_data = self.df[self.df["Date"] == current_date]

        # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤
        signals = pd.Series(
            np.random.randint(0, 2, len(tickers)),
            index=tickers
        )
        return signals

class BaseStrategyEmptyDataError(Exception):
    ...


class LGBMClassifierStrategy(BaseStrategy):
    def __init__(self, df: pd.DataFrame):
        super().__init__(df)
        self.last_train_date = None     # –∫–æ–≥–¥–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑ –æ–±—É—á–∞–ª–∏ –º–æ–¥–µ–ª—å
        self.model_cache = None         # –ø–æ—Å–ª–µ–¥–Ω—è—è –æ–±—É—á–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å

    def model(self, df: pd.DataFrame):
        """
        –û–±—É—á–∞–µ—Ç –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å.
        """
        last_date = df["Date"].max()

        # # ‚öôÔ∏è –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ–æ–±—É—á–∞—Ç—å
        # if self.last_train_date is not None:
        #     # –µ—Å–ª–∏ —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±—É—á–µ–Ω–∏—è –º–µ–Ω—å—à–µ –º–µ—Å—è—Ü–∞ ‚Äî –Ω–µ –ø–µ—Ä–µ–æ–±—É—á–∞–µ–º
        #     if (last_date - self.last_train_date).days < 30 and self.model_cache is not None:
        #         print(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å –æ—Ç {self.last_train_date.date()}")
        #         return self.model_cache

        # üîÑ –ü–µ—Ä–µ–æ–±—É—á–∞–µ–º –º–æ–¥–µ–ª—å
        train_df = df[df["Date"] < last_date].copy()
        val_df   = df[df["Date"] == last_date].copy()

        train_df.dropna(subset=[select_target_columns()], inplace=True)
        train_df.reset_index(drop=True, inplace=True)
        print(f"\n–û–±—É—á–∞–µ–º –º–æ–¥–µ–ª—å –Ω–∞ {len(train_df)} —Å—Ç—Ä–æ–∫ (–¥–æ {last_date.date()})")

        if train_df.empty or val_df.empty:
            raise BaseStrategyEmptyDataError

        X = train_df[select_feature_columns(train_df)]
        y = train_df[select_target_columns()]
        model = train_model_LGBMClassifier(X, y)

        # üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
        self.model_cache = model
        self.last_train_date = last_date

        return model

    def generate_signals(self, current_date: pd.Timestamp, tickers: list) -> pd.Series:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏.
        """
        try:
            model = self.model(self.df[self.df["Date"] <= current_date])
        except BaseStrategyEmptyDataError:
            return pd.Series(0, index=tickers, dtype=int)

        val_df = self.df[self.df["Date"] == current_date].copy()
        if val_df.empty:
            return pd.Series(0, index=tickers, dtype=int)

        X_val = val_df[select_feature_columns(val_df)]
        y_pred = model.predict(X_val)

        val_df["signal"] = y_pred
        signals = (
            val_df.set_index("Ticker")["signal"]
            .reindex(tickers)
            .fillna(0)
            .astype(int)
        )
        return signals


# class LGBMClassifierStrategy(BaseStrategy):
#     def __init__(self, df: pd.DataFrame):
#         super().__init__(df)

#     def model(self, df: pd.DataFrame):
#         """
#         –û–±—É—á–∞–µ—Ç prime_model –Ω–∞ –∏—Å—Ç–æ—Ä–∏–∏ (–¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –¥–∞—Ç—ã),
#         """
#         last_date = df["Date"].max()
#         train_df = df[df["Date"] < last_date]
#         val_df   = df[df["Date"] == last_date]
        
#         train_df.dropna(subset=[select_target_columns()], inplace=True)
#         train_df.reset_index(drop=True, inplace=True)
#         print(f"\n–†–∞–∑–º–µ—Ä –¥–∞—Ç–∞—Å–µ—Ç–∞ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è: {len(train_df)} —Å—Ç—Ä–æ–∫.")


#         if train_df.empty or val_df.empty:
#             raise BaseStrategyEmptyDataError

#         # 1Ô∏è‚É£ Prime model
#         X = train_df[select_feature_columns(train_df)]
#         y = train_df[select_target_columns()]
#         model = train_model_LGBMClassifier(X, y)
#         return model


#     def generate_signals(self, current_date: pd.Timestamp, tickers: list) -> pd.Series:
#         # 2Ô∏è‚É£ Out-of-sample –ø—Ä–æ–≥–Ω–æ–∑
#         # X_val = val_df[select_feature_columns()]
#         # y_pred = model.predict(X_val)

#         try:
#             model = self.model(self.df[self.df["Date"] <= current_date])
#         except BaseStrategyEmptyDataError:
#             return pd.Series(0, index=tickers, dtype=int)

#         last_date = self.df["Date"].max()
#         val_df = self.df[self.df["Date"] == last_date]
#         X_val = val_df[select_feature_columns(val_df)]

#         y_pred = model.predict(X_val)
#         # —Å–≤—è–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —Å —Ç–∏–∫–µ—Ä–∞–º–∏
#         val_df["signal"] = y_pred

#         # —Å–æ–∑–¥–∞—ë–º pd.Series —Å –∏–Ω–¥–µ–∫—Å–æ–º —Ç–∏–∫–µ—Ä–æ–≤
#         signals = (
#             val_df.set_index("Ticker")["signal"]
#             .reindex(tickers)       # —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ—Ä—è–¥–æ–∫ tickers
#             .fillna(0)              # –µ—Å–ª–∏ –ø–æ –∫–∞–∫–æ–º—É-—Ç–æ —Ç–∏–∫–µ—Ä—É –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö ‚Äî 0
#             .astype(int)
#         )
#         return signals


# # ------------------------------------------------------------------
# # ------------------------------------------------------------------
# class MetaModelStrategy(BaseStrategy):
#     """
#     –†–µ–∞–ª–∏–∑—É–µ—Ç –∏–¥–µ—é –º–µ—Ç–∞-–º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏—è:
#     - –æ–±—É—á–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –º–æ–¥–µ–ª—å (prime_model) –ø–æ—à–∞–≥–æ–≤–æ (walk-forward)
#     - –Ω–∞–∫–∞–ø–ª–∏–≤–∞–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –∏ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
#     - –æ–±—É—á–∞–µ—Ç –º–µ—Ç–∞-–º–æ–¥–µ–ª—å, —á—Ç–æ–±—ã —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å —Å–ª–∞–±—ã–µ —Å–∏–≥–Ω–∞–ª—ã
#     - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–∏–≥–Ω–∞–ª—ã –ø–æ —Ç–∏–∫–µ—Ä–∞–º (‚àí1, 0, 1)
#     """

#     META_FEATURES = ['pred_proba_buy', 'pred_proba_sell', 'proba_diff', 'atr_14', 'rsi_14']

#     def __init__(self, df: pd.DataFrame, 
#                  meta_confidence_threshold: float = 0.6):
#         """
#         Args:
#             df: DataFrame —Å –∫–æ–ª–æ–Ω–∫–∞–º–∏ ['Date', 'Ticker', OHLCV, —Ñ–∏—á–∏, target]
#             feature_cols: —Å–ø–∏—Å–æ–∫ —Ñ–∏—á –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥–µ–ª–∏
#             target_col: –∏–º—è —Ü–µ–ª–µ–≤–æ–π –∫–æ–ª–æ–Ω–∫–∏
#             meta_confidence_threshold: –ø–æ—Ä–æ–≥ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –¥–ª—è –º–µ—Ç–∞-–º–æ–¥–µ–ª–∏
#         """
#         super().__init__(df)
#         self.primary_model_builder = build_model
#         self.meta_model_builder = build_meta_model
#         self.feature_cols = select_feature_columns(df)
#         self.target_col: str = select_target_columns()
#         self.meta_confidence_threshold = meta_confidence_threshold

#         # –ë—É—Ñ–µ—Ä –¥–ª—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –º–µ—Ç–∞-–º–æ–¥–µ–ª–∏
#         self.meta_buffer = []

#         # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∏—Ç–æ–≥–æ–≤–æ–π –æ–±—É—á–µ–Ω–Ω–æ–π –º–µ—Ç–∞-–º–æ–¥–µ–ª–∏
#         self.meta_model = None

#     # ------------------------------------------------------------------
#     # 1Ô∏è‚É£ Walk-forward —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–µ—Ç–∞-–º–æ–¥–µ–ª–∏
#     # ------------------------------------------------------------------
#     def collect_meta_training_data(self, rolling_dates: list[pd.Timestamp]):
#         """
#         –ü–æ—à–∞–≥–æ–≤–æ –æ–±—É—á–∞–µ—Ç prime_model –∏ —Å–æ–±–∏—Ä–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –¥–ª—è meta-–º–æ–¥–µ–ª–∏.
#         """
#         print(f"–ù–∞—á–∞–ª–æ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –º–µ—Ç–∞-–ø—Ä–∏–º–µ—Ä–æ–≤: {len(rolling_dates)} —à–∞–≥–æ–≤...")

#         for current_date in rolling_dates:
#             train_df = self.df[self.df["Date"] < current_date]
#             val_df = self.df[self.df["Date"] == current_date]

#             if len(train_df) < 100 or val_df.empty:
#                 continue

#             # --- Primary model ---
#             prime_model = self.primary_model_builder()
#             X_train = train_df[self.feature_cols]
#             y_train = train_df[self.target_col]

#             X_val = val_df[self.feature_cols]
#             y_val = val_df[self.target_col]

#             prime_model.fit(X_train, y_train)

#             # --- –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è ---
#             probas = prime_model.predict_proba(X_val)
#             preds = prime_model.predict(X_val)

#             val_df = val_df.copy()
#             val_df['pred_proba_sell'] = probas[:, 0]
#             if probas.shape[1] == 3:
#                 val_df['pred_proba_hold'] = probas[:, 1]
#                 val_df['pred_proba_buy'] = probas[:, 2]
#             else:
#                 # fallback: –±–∏–Ω–∞—Ä–Ω–∞—è –º–æ–¥–µ–ª—å
#                 val_df['pred_proba_buy'] = probas[:, 1]
#                 val_df['pred_proba_sell'] = probas[:, 0]
#                 val_df['pred_proba_hold'] = 0.0
#             val_df['primary_pred'] = preds
#             val_df['proba_diff'] = val_df['pred_proba_buy'] - val_df['pred_proba_sell']
#             val_df['y_meta'] = (val_df['primary_pred'] == val_df[self.target_col]).astype(int)

#             self.meta_buffer.append(val_df)

#         # –°–æ–±–∏—Ä–∞–µ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
#         meta_df = pd.concat(self.meta_buffer, ignore_index=True)
#         print(f"‚úÖ –ú–µ—Ç–∞-–¥–∞–Ω–Ω—ã—Ö —Å–æ–±—Ä–∞–Ω–æ: {len(meta_df)} —Å—Ç—Ä–æ–∫")
#         return meta_df

#     # ------------------------------------------------------------------
#     # 2Ô∏è‚É£ –û–±—É—á–µ–Ω–∏–µ –º–µ—Ç–∞-–º–æ–¥–µ–ª–∏
#     # ------------------------------------------------------------------
#     def train_meta_model(self, meta_df: pd.DataFrame):
#         """
#         –û–±—É—á–∞–µ—Ç –º–µ—Ç–∞-–º–æ–¥–µ–ª—å –Ω–∞ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
#         """
#         X_meta = meta_df[self.META_FEATURES]
#         y_meta = meta_df['y_meta']

#         meta_model = self.meta_model_builder()
#         meta_model.fit(X_meta, y_meta)
#         self.meta_model = meta_model
#         print(f"‚úÖ –ú–µ—Ç–∞-–º–æ–¥–µ–ª—å –æ–±—É—á–µ–Ω–∞ –Ω–∞ {len(X_meta)} –ø—Ä–∏–º–µ—Ä–∞—Ö")

#     # ------------------------------------------------------------------
#     # 3Ô∏è‚É£ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤
#     # ------------------------------------------------------------------
#     def generate_signals(self, current_date: pd.Timestamp, tickers: list[str]) -> pd.Series:
#         """
#         –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–∏–≥–Ω–∞–ª—ã (‚àí1, 0, 1) –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–π –¥–∞—Ç—ã –∏ —Ç–∏–∫–µ—Ä–æ–≤.
#         """
#         assert self.meta_model is not None, "–ú–µ—Ç–∞-–º–æ–¥–µ–ª—å –Ω–µ –æ–±—É—á–µ–Ω–∞!"

#         # –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–æ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã
#         df_now = self.df[self.df["Date"] == current_date]
#         if df_now.empty:
#             return pd.Series(0, index=tickers, dtype=int)

#         prime_model = self.primary_model_builder()
#         X_train = self.df[self.df["Date"] < current_date][self.feature_cols]
#         y_train = self.df[self.df["Date"] < current_date][self.target_col]
#         prime_model.fit(X_train, y_train)

#         X_test = df_now[self.feature_cols]
#         probas = prime_model.predict_proba(X_test)
#         preds = prime_model.predict(X_test)

#         df_now = df_now.copy()
#         df_now['pred_proba_sell'] = probas[:, 0]
#         if probas.shape[1] == 3:
#             df_now['pred_proba_hold'] = probas[:, 1]
#             df_now['pred_proba_buy'] = probas[:, 2]
#         else:
#             df_now['pred_proba_buy'] = probas[:, 1]
#             df_now['pred_proba_sell'] = probas[:, 0]
#             df_now['pred_proba_hold'] = 0.0
#         df_now['primary_pred'] = preds
#         df_now['proba_diff'] = df_now['pred_proba_buy'] - df_now['pred_proba_sell']

#         X_meta = df_now[self.META_FEATURES]
#         meta_proba = self.meta_model.predict_proba(X_meta)[:, 1]

#         # –ø—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
#         approved_mask = meta_proba > self.meta_confidence_threshold
#         df_now["signal"] = 0
#         df_now.loc[approved_mask, "signal"] = np.sign(df_now.loc[approved_mask, "primary_pred"])

#         # —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã –ø–æ —Ç–∏–∫–µ—Ä–∞–º
#         signals = df_now.set_index("Ticker")["signal"].reindex(tickers).fillna(0).astype(int)
#         return signals
